<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>聚类 on 爱豆吧！</title>
    <link>https://idouba.com/tags/%E8%81%9A%E7%B1%BB/</link>
    <description>Recent content in 聚类 on 爱豆吧！</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>浙ICP备18050493号-1 浙公网安备 33010802006262号</copyright>
    <lastBuildDate>Wed, 18 Sep 2013 13:28:36 +0000</lastBuildDate><atom:link href="https://idouba.com/tags/%E8%81%9A%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Mining 笔记聚类k-medoids</title>
      <link>https://idouba.com/notes-clustering-k-medoids/</link>
      <pubDate>Wed, 18 Sep 2013 13:28:36 +0000</pubDate>
      
      <guid>https://idouba.com/notes-clustering-k-medoids/</guid>
      <description>
        
          
            一、概述 k-means利用簇内点的均值或加权平均值ci（质心）作为类Ci的代表点。对数值属性数据有较好的几何和统计意义。对孤立点是敏感的，如果具有极大值，就可能大幅度地扭曲数据的分布.
k-medoids(k-中心点)算法是为消除这种敏感性提出的，它选择类中位置最接近类中心的对象(称为中心点)作为类的代表点，目标函数仍然可以采用平方误差准则。
PAM（Partitioning Around Medoids，围绕中心点的划分）是最早提出的k中心点算法之一。
二、算法思想： 随机选择k个对象作为初始的k个类的代表点，将其余对象按与代表点对象的距离分配到最近的类；反复用非代表点来代替代表点，以改进聚类质量。 即：算法将判定是否存在一个对象可以取代已存在的一个中心点。
通过检验所有的中心点与非中心点组成的对，算法将选择最能提高聚类效果的对，其中成员总是被分配到与中心点距离最短的类中。 假设类Ki 的当前中心点是Oi , 希望确定Oi是否应与非中心点Oh交换.如果交换可以改善聚类的效果，则进行交换。 距离代价的变化是指所有对象到其类中心点的距离之和的变化，这里使用Cjih表示中心点Oi与非中心点Oh交换后，对象Oj到中心点距离代价的变化。
总代价定义如下：
三、算法描述： 输入： 簇的数目k和包含n个对象的数据库。
输出： k个簇的集合
方法： 1任意选择k个对象作为初始的代表对象（簇中心点） 2repeat 3将每个剩余对象指派到最近的代表对象所代表的簇 4随机地选择一个非代表对象Orandom 5计算用Orandom交换代表对象Oi的总代价S 6if S &amp;lt; 0，then用Orandom替换Oi ，形成新的k个代表对象的集合 7UNTIL不发生变化 四、算法实例 样本点 A B C D E A 1 2 2 3 B 1 2 4 3 C 2 2 1 5 D 2 4 1 3 E 3 3 5 3 第一步 建立阶段： 假如从5个对象中随机抽取的2个中心点为{A，B},则样本被划分为{A、C、D}和{B、E}
第二步 交换阶段： 假定中心点A、B分别被非中心点C、D、E替换，根据PAM算法需要计算下列代价TC(AC)、 TC(AD)、 TC(AE)、TC(BC)、TC(BD)、 TC(BE)。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
