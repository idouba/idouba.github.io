<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on 爱豆吧！</title>
    <link>https://idouba.com/tags/jvm/</link>
    <description>Recent content in JVM on 爱豆吧！</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>浙ICP备18050493号-1 浙公网安备 33010802006262号</copyright>
    <lastBuildDate>Tue, 15 Jul 2014 05:49:37 +0000</lastBuildDate><atom:link href="https://idouba.com/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最简单例子图解JVM内存分配和回收</title>
      <link>https://idouba.com/a-simple-example-demo-jvm-allocation-and-gc/</link>
      <pubDate>Tue, 15 Jul 2014 05:49:37 +0000</pubDate>
      
      <guid>https://idouba.com/a-simple-example-demo-jvm-allocation-and-gc/</guid>
      <description>
        
          
            一、简介 JVM采用分代垃圾回收。在JVM的内存空间中把堆空间分为年老代和年轻代。将大量（据说是90%以上）创建了没多久就会消亡的对象存储在年轻代，而年老代中存放生命周期长久的实例对象。年轻代中又被分为Eden区(圣经中的伊甸园)、和两个Survivor区。新的对象分配是首先放在Eden区，Survivor区作为Eden区和Old区的缓冲，在Survivor区的对象经历若干次收集仍然存活的，就会被转移到年老区。
简单讲，就是生命期短的对象放在一起，将少数生命期长的对象放在一起，分别采用不同的回收策略。生命期短的对象回收频率比较高，生命期长的对象采用比较低回收频率，生命期短的对象被尝试回收几次发现还存活，则被移到另外一个地方去存起来。就像现在夏天了，勤劳的douma把doudou和douba常穿的衣服放在顺手的地方，把冬天的衣服打包放在柜子
另一个地方。虽然把doudou的小衣服类比成虚拟机里的对象有点不合适，大致意思应该就是这样。
本文中通过最简单的一个例子来demo下这个过程，代码很短，很简单，希望剖析的细一点，包括每一步操作后对象的分配和回收对内存堆产生的影响。设定上包括对堆中年轻代（年轻代中eden区和survivor区）、年老代大小的设定，以及设置阈值控制年轻代到年老代的晋升。
二、示例代码 下面是最简单的代码，通过代码的每一步的执行来剖析其中的规则。
1package com.idouba.jvm.demo; 2/** 3 * @author idouba 4 * Use shortest code demo jvm allocation, gc, and someting in gc. 5 * 6 * In details 7 * 1) sizing of young generation (eden space，survivor space),old generation. 8 * 2) allocation in eden space, gc in young generation, 9 * 3) working with survivor space and with old generation. 10 * 11 */ 12 public class SimpleJVMArg { 13 /** 14 * @param args 15 */ 16 public static void main(String[] args) 17 { 18 demo(); 19 } 20 21 /** 22 * VM arg：-verbose:gc -Xms200M -Xmx200M -Xmn100M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1 -XX:+PrintTenuringDistribution 23 * */ 24 @SuppressWarnings(&amp;#34;unused&amp;#34;) 25 public static void demo() { 26 27 final int tenMB = 10* 1024 * 1024; 28 29 byte[] alloc1, alloc2, alloc3; 30 31 alloc1 = new byte[tenMB / 5]; 32 alloc2 = new byte[5 * tenMB]; 33 alloc3 = new byte[4 * tenMB]; 34 alloc3 = null; 35 alloc3 = new byte[6 * tenMB]; 36 } 37 } package com.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
